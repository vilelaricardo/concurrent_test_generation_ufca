import java.util.Random;
import java.util.concurrent.Semaphore;

public class Master {
    public static final float precision = 0.001f;

    public static void main(String[] args) throws Exception {
        float mr = 1;
        float sum = 0;
        int matrixOrder = 2;
        int thread_semaphore_parameter = 1;
        int master_semaphore_parameter = 1;
        int iterations = 0;

      
            matrixOrder = Integer.parseInt(args[0]);
            thread_semaphore_parameter = Integer.parseInt(args[1]);
            master_semaphore_parameter = Integer.parseInt(args[2]);

        int synch[] = new int[matrixOrder];
        float A[][] = new float[matrixOrder][matrixOrder];
        float AStar[][] = new float[matrixOrder][matrixOrder];
        float B[] = new float[matrixOrder];
        float x[] = new float[matrixOrder];
        float x_temp[] = new float[matrixOrder];
        float dif[] = new float[matrixOrder];
        float sumRow[] = new float[matrixOrder];
        
        SharedVariables shared = new SharedVariables();
        
        //Semaphore row_mutex[] = new Semaphore[matrixOrder];
        Semaphore row_mutex_0 = new Semaphore(0);
        Semaphore row_mutex_1 = new Semaphore(0);
        
        //Semaphore multiple_mutex[] = new Semaphore[matrixOrder];
        Semaphore multiple_mutex_0 = new Semaphore(0);
        Semaphore multiple_mutex_1 = new Semaphore(0);
        
        //Semaphore semaphore_thread1[][] = new Semaphore[matrixOrder][matrixOrder];
        Semaphore semaphore_thread1_0_0 = new Semaphore(0);
        Semaphore semaphore_thread1_0_1 = new Semaphore(0);
        Semaphore semaphore_thread1_1_0 = new Semaphore(0);
        Semaphore semaphore_thread1_1_1 = new Semaphore(0);
        
        //Semaphore semaphore_thread2[][] = new Semaphore[matrixOrder][matrixOrder];
        Semaphore semaphore_thread2_0_0 = new Semaphore(0);
        Semaphore semaphore_thread2_0_1 = new Semaphore(0);
        Semaphore semaphore_thread2_1_0 = new Semaphore(0);
        Semaphore semaphore_thread2_1_1 = new Semaphore(0);
        
        Semaphore continues_mutex = new Semaphore(0);
        continues_mutex.release();
        Semaphore synch_threads_mutex = new Semaphore(0);
        synch_threads_mutex.release();

        Semaphore master_semaphore1 = new Semaphore(0);
        Semaphore master_semaphore2 = new Semaphore(0);

        row_mutex_0 = new Semaphore(0);
        row_mutex_0.release();
        multiple_mutex_0 = new Semaphore(0);
        multiple_mutex_0.release();
        synch[0] = 0;
        sumRow[0] = 0;
            
        row_mutex_1 = new Semaphore(0);
        row_mutex_1.release();
        multiple_mutex_1 = new Semaphore(0);
        multiple_mutex_1.release();
        synch[1] = 0;
        sumRow[1] = 0;

        Random gerador = new Random();

        A[0][0] = 4;
	    A[0][1] = 2;
	    A[1][0] = 1;
	    A[1][1] = 3;

	    B[0] = 7;
	    B[1] = -8;
	
        /*for (int i = 0; i < matrixOrder; i++) {
            sum = 0;
            for (int j = 0; j < matrixOrder; j++) {
                if (i != j) {
                    while ((A[i][j] = gerador.nextInt(10)) == 0);
                }
                sum += A[i][j];
            }
            A[i][i] = ++sum;
            while ((B[i] = gerador.nextInt(10)) == 0);
        }*/
            
        int I = (int) 0 / matrixOrder;
        int J = 0 - matrixOrder * I;       //row_mutx_0
        Slave thread_handle0 = new Slave();
        thread_handle0.setSlave(0, I, J, A, B, AStar, x, x_temp, sumRow, synch, dif,
                                    thread_semaphore_parameter, master_semaphore_parameter);
        thread_handle0.setSemaphore_thread1_i_i(semaphore_thread1_0_0);
        thread_handle0.setSemaphore_thread1_i_j(semaphore_thread1_0_0);   
        thread_handle0.setSemaphore_thread2_i_i(semaphore_thread2_0_0);  
        thread_handle0.setSemaphore_thread2_i_j(semaphore_thread2_0_0); 
        thread_handle0.setSemaphore_continues_mutex(continues_mutex);
        thread_handle0.setSemaphore_synch_threads_mutex(synch_threads_mutex);
        thread_handle0.setSemaphore_multiple_mutex(multiple_mutex_0);
        thread_handle0.setSemaphore_row_mutex(row_mutex_0);
        thread_handle0.setMaster_semaphore1(master_semaphore1);
        thread_handle0.setMaster_semaphore2(master_semaphore2); 
        thread_handle0.setSharedVariables(shared);   
        thread_handle0.start();
            
        I = (int) 1 / matrixOrder;
        J = 1 - matrixOrder * I;
        Slave thread_handle1 = new Slave();   //row_mutx_0
        thread_handle1.setSlave(1, I, J, A, B, AStar, x, x_temp, sumRow, synch, dif,
                     thread_semaphore_parameter, master_semaphore_parameter);
        thread_handle1.setSemaphore_thread1_i_i(semaphore_thread1_0_0);
        thread_handle1.setSemaphore_thread1_i_j(semaphore_thread1_0_1);    
        thread_handle1.setSemaphore_thread2_i_i(semaphore_thread2_0_0); 
        thread_handle1.setSemaphore_thread2_i_j(semaphore_thread2_0_1);  
        thread_handle1.setSemaphore_continues_mutex(continues_mutex);
        thread_handle1.setSemaphore_synch_threads_mutex(synch_threads_mutex);
        thread_handle1.setSemaphore_multiple_mutex(multiple_mutex_0);
        thread_handle1.setSemaphore_row_mutex(row_mutex_0);
        thread_handle1.setMaster_semaphore1(master_semaphore1);
        thread_handle1.setMaster_semaphore2(master_semaphore2); 
        thread_handle1.setSharedVariables(shared); 
        thread_handle1.start();
            
            
        I = (int) 2 / matrixOrder;
        J = 2 - matrixOrder * I;
        Slave thread_handle2 = new Slave();   //row_mutx_1
        thread_handle2.setSlave(2, I, J, A, B, AStar, x, x_temp, sumRow, synch, dif,
                      thread_semaphore_parameter, master_semaphore_parameter);
        thread_handle2.setSemaphore_thread1_i_i(semaphore_thread1_1_1);
        thread_handle2.setSemaphore_thread1_i_j(semaphore_thread1_1_0);    
        thread_handle2.setSemaphore_thread2_i_i(semaphore_thread2_1_1); 
        thread_handle2.setSemaphore_thread2_i_j(semaphore_thread2_1_0);  
        thread_handle2.setSemaphore_continues_mutex(continues_mutex);
        thread_handle2.setSemaphore_synch_threads_mutex(synch_threads_mutex);
        thread_handle2.setSemaphore_multiple_mutex(multiple_mutex_1);
        thread_handle2.setSemaphore_row_mutex(row_mutex_1);
        thread_handle2.setMaster_semaphore1(master_semaphore1);
        thread_handle2.setMaster_semaphore2(master_semaphore2); 
        thread_handle2.setSharedVariables(shared);
        thread_handle2.start();
            
            
        I = (int) 3 / matrixOrder;
        J = 3 - matrixOrder * I;
        Slave thread_handle3 = new Slave();   //row_mutx_1
        thread_handle3.setSlave(3, I, J, A, B, AStar, x, x_temp, sumRow, synch, dif,
                      thread_semaphore_parameter, master_semaphore_parameter);
        thread_handle3.setSemaphore_thread1_i_i(semaphore_thread1_1_1);
        thread_handle3.setSemaphore_thread1_i_j(semaphore_thread1_1_1);    
        thread_handle3.setSemaphore_thread2_i_i(semaphore_thread2_1_1); 
        thread_handle3.setSemaphore_thread2_i_j(semaphore_thread2_1_1);  
        thread_handle3.setSemaphore_continues_mutex(continues_mutex);
        thread_handle3.setSemaphore_synch_threads_mutex(synch_threads_mutex);
        thread_handle3.setSemaphore_multiple_mutex(multiple_mutex_1);
        thread_handle3.setSemaphore_row_mutex(row_mutex_1);
        thread_handle3.setMaster_semaphore1(master_semaphore1);
        thread_handle3.setMaster_semaphore2(master_semaphore2); 
        thread_handle3.setSharedVariables(shared);
        thread_handle3.start();

        for (int i = 0; i < matrixOrder; i++) {
            if (master_semaphore_parameter == 1) {
                master_semaphore1.acquireUninterruptibly();
            } else {
                master_semaphore2.acquireUninterruptibly();
            }
        }

        if (!shared.getThread_continues()) {
            System.out.println("The system does not converge.\n Finish the program.");
            return;
        }

        while (true) {
            shared.setZeroMax_dif();
            shared.setZeroMax_x();
            
            iterations++; 

            if (thread_semaphore_parameter == 1) {
                semaphore_thread1_0_1.release();
                semaphore_thread1_1_0.release();
            } else {
                semaphore_thread2_0_1.release();
                semaphore_thread2_1_0.release();
            }

            // finish
            if (!shared.getThread_continues()) {
                break;
            }

            if (master_semaphore_parameter == 1) {
                master_semaphore1.acquireUninterruptibly();
            } else {
                master_semaphore2.acquireUninterruptibly();
            }

            mr = shared.getMax_dif() / shared.getMax_x();

            if (mr <= precision) {
                shared.setThread_continues();
            }
        }// end while
        
        System.out.printf("Iterations:%d, x[0]=%.3f, x[1]=%.3f \n",  iterations, x[0], x[1]);
        System.out.printf("Final iteration:%d, max_dif=%.4f max_x=%.4f  mr=%.4f  \n", iterations, shared.getMax_dif(), shared.getMax_x(), mr);

        thread_handle0.join();
        thread_handle1.join();
        thread_handle2.join();
        thread_handle3.join();

        for (int i = 0; i < matrixOrder; i++) {
            for (int j = 0; j < matrixOrder; j++) {
                System.out.printf("A[%d][%d]=%.2f   ", i, j, A[i][j]);
            }
            System.out.printf("     B[%d]=%.2f \n", i, B[i]);
        }

        int i = gerador.nextInt(10) % matrixOrder;
        sum = 0;
        for (int j = 0; j < matrixOrder; j++) {
            sum += (A[i][j] * x[j]);
        }

        System.out.printf("\nApplying x [*] in the row %d of A[ %d ][ * ], the result is: %.3f. \nB[%d] = %.3f \n", i,
               i, sum, i, B[i]);
    }// end main
}// end Master

public class SharedVariables {
    private int synch_threads = 0;
    private boolean thread_continues = true;
    private float max_x =  0.0f;
    private float max_dif =  0.0f;
    
    public int getSynch_threads() {
        return synch_threads;
    }
 
    public void incrementSynch_threads() {
        synch_threads++;
    }
    
    public void zeroSynch_threads() {
        synch_threads = 0;
    }
 
    public boolean getThread_continues() {
        return thread_continues;
    }
 
    public void setThread_continues() {
        thread_continues = false;
    }
    
    public float getMax_x() {
        return max_x;
    }
 
    public void setMax_x(float value) {
        max_x = value;
    }
    
    public void setZeroMax_x() {
        max_x = 0.0f;
    }
    
    public float getMax_dif() {
        return max_dif;
    }
 
    public void setMax_dif(float value) {
        max_dif = value;
    }
    
    public void setZeroMax_dif() {
        max_dif = 0.0f;
    }
}

import java.util.concurrent.Semaphore;
import java.math.*;

public class Slave extends Thread {
    private int I, J, p;
    int synch[];
    int thread_semaphore_parameter;
    int master_semaphore_parameter;
    float mr = 1;
    float A[][];
    float AStar[][];
    float B[];
    float x[];
    float x_temp[];
    float dif[];
    float sumRow[];
    int matrixOrder = 2;
    float value1;
    float value2;
    Semaphore row_mutex;
    Semaphore multiple_mutex;
    Semaphore semaphore_thread1_i_i;
    Semaphore semaphore_thread1_i_j;
    Semaphore semaphore_thread2_i_i;
    Semaphore semaphore_thread2_i_j;
    Semaphore master_semaphore1;
    Semaphore master_semaphore2;
    Semaphore continues_mutex;
    Semaphore synch_threads_mutex;
    SharedVariables shared;
    
    public void setSemaphore_thread1_i_i(Semaphore semaphore_thread1_i_i) {
    	this.semaphore_thread1_i_i = semaphore_thread1_i_i;
    }
    
    public void setSemaphore_thread1_i_j(Semaphore semaphore_thread1_i_j) {
    	this.semaphore_thread1_i_j = semaphore_thread1_i_j;
    }
    
    public void setSemaphore_thread2_i_i(Semaphore semaphore_thread2_i_i) {
    	this.semaphore_thread2_i_i = semaphore_thread2_i_i;
    }
    
    public void setSemaphore_thread2_i_j(Semaphore semaphore_thread2_i_j) {
    	this.semaphore_thread2_i_j = semaphore_thread2_i_j;
    }
    
    public void setSemaphore_row_mutex(Semaphore row_mutex) {
        this.row_mutex = row_mutex;
    }
    
    public void setSemaphore_multiple_mutex(Semaphore multiple_mutex) {
        this.multiple_mutex = multiple_mutex;
    }
    
    public void setSemaphore_continues_mutex(Semaphore continues_mutex) {
        this.continues_mutex = continues_mutex;
    }
    
    public void setSemaphore_synch_threads_mutex(Semaphore synch_threads_mutex) {
        this.synch_threads_mutex = synch_threads_mutex;
    }
    
    public void setMaster_semaphore1(Semaphore master_semaphore1) {
        this.master_semaphore1 = master_semaphore1;
    }
    
    public void setMaster_semaphore2(Semaphore master_semaphore2) {
        this.master_semaphore2 = master_semaphore2;
    }
    
    public void setSharedVariables(SharedVariables shared) {
        this.shared = shared;
    }
    
    public void setSlave(int p, int I, int J, float A[][], float B[], float AStar[][],
            float x[], float x_temp[], float sumRow[], int synch[], float dif[], 
                int thread_semaphore_parameter, int master_semaphore_parameter ) {
        this.p = p;
        this.I = I;
        this.J = J;
        this.A = A;
        this.B = B;
        this.AStar = AStar;
        this.x = x;
        this.x_temp = x_temp;
        this.sumRow = sumRow;
        this.synch = synch;
        this.dif = dif;
        this.thread_semaphore_parameter = thread_semaphore_parameter;
        this.master_semaphore_parameter = master_semaphore_parameter;
    }

    public void run() {
        if (I != J) {
            AStar[I][J] = A[I][J] / A[I][I];
            row_mutex.acquireUninterruptibly();
            sumRow[I] += (float) Math.abs((float) AStar[I][J]);
            synch[I]++;
            if (synch[I] == (matrixOrder - 1)) {
                if (thread_semaphore_parameter == 1) {
                    semaphore_thread1_i_i.release();
                } else {
                    semaphore_thread2_i_i.release();
                }
                synch[I] = 0;
            }
            row_mutex.release();

            while (true) {
                if (thread_semaphore_parameter == 1) {
                    semaphore_thread1_i_j.acquireUninterruptibly();
                } else {
                    semaphore_thread2_i_j.acquireUninterruptibly();
                }

                if (!shared.getThread_continues()) {
                    if (thread_semaphore_parameter == 1) {
                        semaphore_thread1_i_i.release();
                    } else {
                        semaphore_thread2_i_i.release();
                    }
                    return;
                }

                float mult = AStar[I][J] * x[J];

                multiple_mutex.acquireUninterruptibly();
                sumRow[I] = sumRow[I] + mult;
                multiple_mutex.release();

                row_mutex.acquireUninterruptibly();
                synch[I]++;
                if (synch[I] == (matrixOrder - 1)) {
                    if (thread_semaphore_parameter == 1) {
                        semaphore_thread1_i_i.release();
                    } else {
                        semaphore_thread2_i_i.release();
                    }
                    synch[I] = 0;
                }
                row_mutex.release();

            } // end while
        } else {
            x_temp[I] = x[I] = AStar[I][I] = B[I] / A[I][I];

            if (thread_semaphore_parameter == 1) {
                semaphore_thread1_i_i.acquireUninterruptibly();
            } else {
                semaphore_thread2_i_i.acquireUninterruptibly();
            }

            if (!shared.getThread_continues()) {
                // finalizing diagonal thread
                return;
            }

            continues_mutex.acquireUninterruptibly();

	      int a = (int) sumRow[I];	
            //if (sumRow[I] >= 1) {
		if(a>=1){
                shared.setThread_continues(); // the system does not converge
            }
            sumRow[I] = 0;
            continues_mutex.release();

            if (master_semaphore_parameter == 1) {
                master_semaphore1.release();
            } else {
                master_semaphore2.release();
            }

            while (true) {
                if (thread_semaphore_parameter == 1) {
                    semaphore_thread1_i_i.acquireUninterruptibly();
                } else {
                    semaphore_thread2_i_i.acquireUninterruptibly();
                }

                if (!shared.getThread_continues()) {
                    // finalizing diagonal thread
                    break;
                }


                x_temp[I] = AStar[I][I] - sumRow[I];
                dif[I] = Math.abs((x_temp[I] - x[I]));


                continues_mutex.acquireUninterruptibly();

	int j = (int) dif[I] * 1000000; //Ajuste pois a ferramenta de teste não consegue armazenar ponto flutuante em comparações
	int g = (int) shared.getMax_dif() * 1000000; //Ajuste pois a ferramenta de teste não consegue armazenar ponto flutuante em comparações
		
                //if (dif[I] > shared.getMax_dif()) {
		if(j>0){
                    value1 = dif[I];
                    shared.setMax_dif(value1);
                }
			
		
	int b = (int) Math.abs(x_temp[I]) * 1000000; //Ajuste pois a ferramenta de teste não consegue armazenar ponto flutuante em comparações
	int c = (int) shared.getMax_x() * 1000000; //Ajuste pois a ferramenta de teste não consegue armazenar ponto flutuante em comparações
              //  if (Math.abs(x_temp[I]) > shared.getMax_x()) {
	   	  if (b>c){
                    value2 = Math.abs(x_temp[I]);
                    shared.setMax_x(value2);
                }

                sumRow[I] = 0;
                x[I] = x_temp[I];
                continues_mutex.release();

                synch_threads_mutex.acquireUninterruptibly();
                shared.incrementSynch_threads();
                if (shared.getSynch_threads() == matrixOrder) {
                    if (master_semaphore_parameter == 1) {
                        master_semaphore1.release();
                    } else {
                        master_semaphore2.release();
                    }
                    shared.zeroSynch_threads(); 
                }
                synch_threads_mutex.release();
            }
            return;
        }
    }
}
