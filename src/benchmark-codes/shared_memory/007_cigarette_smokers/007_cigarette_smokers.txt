import java.util.concurrent.Semaphore;

public class Controller extends Thread {
    private int choice1;
    private int choice2;
    private boolean isTobacco = false;
    private boolean isPaper = false;
    private boolean isMatch = false;
    private Semaphore agentSemaphore;
    private Semaphore tobaccoSemaphore;
    private Semaphore paperSemaphore;
    private Semaphore matchSemaphore;
    
    public void setController(int choice1, int choice2, boolean isTobacco, boolean isPaper, boolean isMatch) {
        this.choice1 = choice1;
        this.choice2 = choice2;
        this.isTobacco = isTobacco;
        this.isPaper = isPaper;
        this.isMatch = isMatch;
    }
    
    public void setAgentSemaphore(Semaphore agentSemaphore){
    	this.agentSemaphore = agentSemaphore;
    }
            
    public void setTobaccoSemaphore(Semaphore tobaccoSemaphore){
        this.tobaccoSemaphore = tobaccoSemaphore;	
    }
    
    public void setPaperSemaphore(Semaphore paperSemaphore){
        this.paperSemaphore = paperSemaphore;	
    }
    
    public void setMatchSemaphore(Semaphore matchSemaphore){
        this.matchSemaphore = matchSemaphore;	
    }
    
    public void run() {
        if (choice1 == 0 || choice2 == 0) {
            // The controller puts tobacco on the table
            tobaccoSemaphore.acquireUninterruptibly();
            agentSemaphore.acquireUninterruptibly();
            if (isPaper) {
                isPaper = false;
                matchSemaphore.release();
            }
            if (isMatch) {
                isMatch = false;
                paperSemaphore.release();
            }
            if (!isPaper && !isMatch) {
                isTobacco = true;
            }
        }
        if (choice1 == 1 || choice2 == 1) {
            // The controller puts paper on the table
            paperSemaphore.acquireUninterruptibly();
            agentSemaphore.acquireUninterruptibly();
            if (isMatch) {
                isMatch = false;
                tobaccoSemaphore.release();
            }
            if (isTobacco) {
                isTobacco = false;
                matchSemaphore.release();
            } 
            if (!isTobacco && !isMatch) {
                isPaper = true;
            }
        }
        if (choice1 == 2 || choice2 == 2) {
            // The controller puts match on the table
            matchSemaphore.acquireUninterruptibly();
            agentSemaphore.acquireUninterruptibly();
            if (isTobacco) {
                isTobacco = false;
                paperSemaphore.release();
            }
            if (isPaper) {
                isPaper = false;
                tobaccoSemaphore.release();
            }
            if (!isTobacco && !isPaper) {
                isMatch = true;
            }
        }
    }
}
 
import java.util.Random;
import java.util.concurrent.Semaphore;

public class Main {
    public static void main(String[] args) throws InterruptedException {
        boolean isTobacco = false;
        boolean isPaper = false;
        boolean isMatch = false;
        Semaphore agentSemaphore = new Semaphore(0);
        Semaphore tobaccoSemaphore = new Semaphore(0);
        Semaphore paperSemaphore = new Semaphore(0);
        Semaphore matchSemaphore = new Semaphore(0);
        agentSemaphore.release();
        tobaccoSemaphore.release();
        paperSemaphore.release();
        matchSemaphore.release();
                                
        int choice1 = 2;
        int choice2 = 1;
        
          //  choice1 = Integer.parseInt(args[0]); // 0 ou 1 ou 2  --- não podem ser iguais
          //  choice2 = Integer.parseInt(args[1]); // 0 ou 1 ou 2 --- não podem ser iguais

            
 if((choice1>=0) && (choice1<=2)){  
      if((choice2>=0) && (choice2<=2)){
    	  if(choice1!=choice2){
      
        Controller controller = new Controller();
        controller.setController(choice1, choice2, isTobacco, isPaper, isMatch);
        controller.setAgentSemaphore(agentSemaphore); 
        controller.setTobaccoSemaphore(tobaccoSemaphore);
        controller.setPaperSemaphore(paperSemaphore);
        controller.setMatchSemaphore(matchSemaphore);
        controller.start();
        
        SharedObject status = new SharedObject();

        Smoker_With_Tobacco smokerTobacco = new Smoker_With_Tobacco();
        smokerTobacco.setSmoker_With_Tobacco(status);
        smokerTobacco.setAgentSemaphore(agentSemaphore); 
        smokerTobacco.setTobaccoSemaphore(tobaccoSemaphore);
        smokerTobacco.setPaperSemaphore(paperSemaphore);
        smokerTobacco.setMatchSemaphore(matchSemaphore);
        smokerTobacco.start();

        Smoker_With_Paper smokerPaper = new Smoker_With_Paper();
        smokerPaper.setSmoker_With_Paper(status);
        smokerPaper.setAgentSemaphore(agentSemaphore); 
        smokerPaper.setTobaccoSemaphore(tobaccoSemaphore);
        smokerPaper.setPaperSemaphore(paperSemaphore);
        smokerPaper.setMatchSemaphore(matchSemaphore);
        smokerPaper.start();

        Smoker_With_Match smokerMatch = new Smoker_With_Match();
        smokerMatch.setSmoker_With_Match(status);
        smokerMatch.setAgentSemaphore(agentSemaphore); 
        smokerMatch.setTobaccoSemaphore(tobaccoSemaphore);
        smokerMatch.setPaperSemaphore(paperSemaphore);
        smokerMatch.setMatchSemaphore(matchSemaphore);
        smokerMatch.start();
    } }}
}
}

public class SharedObject {
    boolean status = false;
    
    public void setStatus() {
        status = true;
    }
    
    public boolean getStatus() {
        return status;
    }
}

import java.util.concurrent.Semaphore;

public class Smoker_With_Match extends Thread {
    private Semaphore agentSemaphore;
    private Semaphore tobaccoSemaphore;
    private Semaphore matchSemaphore;
    private Semaphore paperSemaphore;
    private SharedObject status;
    
    public void setSmoker_With_Match(SharedObject status) {
        this.status = status;
    }
    
    public void setAgentSemaphore(Semaphore agentSemaphore){
    	this.agentSemaphore = agentSemaphore;
    }
            
    public void setTobaccoSemaphore(Semaphore tobaccoSemaphore){
        this.tobaccoSemaphore = tobaccoSemaphore;	
    }
    
    public void setPaperSemaphore(Semaphore paperSemaphore){
        this.paperSemaphore = paperSemaphore;	
    }
    
    public void setMatchSemaphore(Semaphore matchSemaphore){
        this.matchSemaphore = matchSemaphore;	
    }

    public void run() {
            matchSemaphore.acquireUninterruptibly();
            if (status.getStatus() == false) {
            status.setStatus();
            makeCigarrete();
            agentSemaphore.release();
            smoke();
            
            paperSemaphore.release();
            tobaccoSemaphore.release();
            }
    }

    private void makeCigarrete() {
        // The smoker with match is making the cigarette
        try {
            Thread.sleep(500);
        } catch (Exception ie) {}
    }

    private void smoke() {
        System.out.println("The smoker with match smoke the cigarette!");
        try {
            Thread.sleep(500);
        } catch (Exception ie) {}
    }
}

import java.util.concurrent.Semaphore;

public class Smoker_With_Paper extends Thread {
    private Semaphore agentSemaphore;
    private Semaphore tobaccoSemaphore;
    private Semaphore matchSemaphore;
    private Semaphore paperSemaphore;
    private SharedObject status;

    public void setSmoker_With_Paper(SharedObject status) {
        this.status = status;
    }
    
    public void setAgentSemaphore(Semaphore agentSemaphore){
    	this.agentSemaphore = agentSemaphore;
    }
            
    public void setTobaccoSemaphore(Semaphore tobaccoSemaphore){
        this.tobaccoSemaphore = tobaccoSemaphore;	
    }
    
    public void setPaperSemaphore(Semaphore paperSemaphore){
        this.paperSemaphore = paperSemaphore;	
    }
    
    public void setMatchSemaphore(Semaphore matchSemaphore){
        this.matchSemaphore = matchSemaphore;	
    }

    public void run() {
            paperSemaphore.acquireUninterruptibly();
            if (status.getStatus() == false) {
            status.setStatus();
            makeCigarrete();
            agentSemaphore.release();
            smoke();
            
            matchSemaphore.release();
            tobaccoSemaphore.release();
            }
    }

    private void makeCigarrete() {
        // The smoker with paper is making the cigarette
        try {
            Thread.sleep(500);
        } catch (Exception ie) {}
    }

    private void smoke() {
        System.out.println("The smoker with paper smoke the cigarette!");
        try {
            Thread.sleep(500);
        } catch (Exception ie) {}
    }
}

import java.util.concurrent.Semaphore;

public class Smoker_With_Tobacco extends Thread {
    private Semaphore agentSemaphore;
    private Semaphore tobaccoSemaphore;
    private Semaphore matchSemaphore;
    private Semaphore paperSemaphore;
    private SharedObject status;
    
    public void setSmoker_With_Tobacco(SharedObject status) {
        this.status = status;
    }
    
    public void setAgentSemaphore(Semaphore agentSemaphore){
    	this.agentSemaphore = agentSemaphore;
    }
            
    public void setTobaccoSemaphore(Semaphore tobaccoSemaphore){
        this.tobaccoSemaphore = tobaccoSemaphore;	
    }
    
    public void setPaperSemaphore(Semaphore paperSemaphore){
        this.paperSemaphore = paperSemaphore;	
    }
    
    public void setMatchSemaphore(Semaphore matchSemaphore){
        this.matchSemaphore = matchSemaphore;	
    }

    public void run() {
            tobaccoSemaphore.acquireUninterruptibly();
            if (status.getStatus() == false) {
            status.setStatus();
            makeCigarrete();
            agentSemaphore.release();
            smoke();
            
            matchSemaphore.release();
            paperSemaphore.release();
            }
    }

    private void makeCigarrete() {
        // The smoker with tobacco is making the cigarette
        try {
            Thread.sleep(500);
        } catch (Exception ie) {}
    }

    private void smoke() {
        System.out.println("The smoker with tobacco smoke the cigarette!");
        try {
            Thread.sleep(500);
        } catch (Exception ie) {}
    }
}