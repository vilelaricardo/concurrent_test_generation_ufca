import java.util.concurrent.Semaphore;

public class FirstSlave extends Thread {
    Semaphore mutexCij;
    Semaphore semaphoreSecondSlave;
    int matrixOrder;
    int a[][];
    int b[][];
    int c[][];
    int row;
    int column;
    int a_row, b_row;
    int a_column, b_column;
    
    public void setSemaphoreInFirstSlave(Semaphore semaphoreSecondSlave) {
        this.semaphoreSecondSlave = semaphoreSecondSlave;	
    }

    public void setFirstSlave(Semaphore mutexCij, int N, int a[][], int b[][], int c[][], int a_row, int a_column, 
            int b_row, int b_column, int row, int column) {
        this.mutexCij = mutexCij;
        this.matrixOrder = N;
        this.a = a;
        this.b = b;
        this.c = c;
        this.a_row = a_row;
        this.a_column = a_column;
        this.b_row = b_row;
        this.b_column = b_column;
        this.row = row;
        this.column = column;
    }

    public void run() {
        semaphoreSecondSlave.release();
        semaphoreSecondSlave.release();
    }
}

import java.util.concurrent.Semaphore;

public class Matrix {
    public static void main(String[] args) throws InterruptedException {
        int i;
        int row;
        int column;
        int test = 1; // pode assumir 1 ou 0
        int matrixOrder = 2; //fixo

        
            matrixOrder = Integer.parseInt(args[0]); // fixo 2
            test = Integer.parseInt(args[1]); // 0 ou diferente de 0
        
        
        int a[][] = new int[matrixOrder][matrixOrder];
        int b[][] = new int[matrixOrder][matrixOrder];
        int c[][] = new int[matrixOrder][matrixOrder];
        
        Semaphore mutexCij_1_0 = new Semaphore(0);
        Semaphore mutexCij_1_1 = new Semaphore(0);
        Semaphore mutexCij_1_2 = new Semaphore(0);
        Semaphore mutexCij_1_3 = new Semaphore(0);
        
        Semaphore mutexCij_2_0 = new Semaphore(0);
        Semaphore mutexCij_2_1 = new Semaphore(0);
        Semaphore mutexCij_2_2 = new Semaphore(0);
        Semaphore mutexCij_2_3 = new Semaphore(0);
        
        Semaphore semaphoreSecondSlave0 = new Semaphore(0);
        Semaphore semaphoreSecondSlave1 = new Semaphore(0);
        Semaphore semaphoreSecondSlave2 = new Semaphore(0);
        Semaphore semaphoreSecondSlave3 = new Semaphore(0);

        for (row = 0; row < matrixOrder; row++) {
            for (column = 0; column < matrixOrder; column++) {
                a[row][column] = column + 1;
                b[row][column] = column + 1;
                System.out.printf("a[%d][%d]=%d ", row, column, a[row][column]);
            }
            System.out.print("      ");
            for (column = 0; column < matrixOrder; column++) {
                System.out.printf("b[%d][%d]=%d ", row, column, b[row][column]);
            }
            System.out.println();
        }

        if (test == 0) {
            mutexCij_1_0.release();
            mutexCij_1_1.release();
            mutexCij_1_2.release();
            mutexCij_1_3.release();
        } else {
            mutexCij_2_0.release();
            mutexCij_2_1.release();
            mutexCij_2_2.release();
            mutexCij_2_3.release();
        }

        FirstSlave thread_handle0 = new FirstSlave();
        FirstSlave thread_handle1 = new FirstSlave();
        FirstSlave thread_handle2 = new FirstSlave();
        FirstSlave thread_handle3 = new FirstSlave();
                
        SecondSlave secondSlave_handle0 = new SecondSlave();
        SecondSlave secondSlave_handle1 = new SecondSlave();
        SecondSlave secondSlave_handle2 = new SecondSlave();
        SecondSlave secondSlave_handle3 = new SecondSlave();
        SecondSlave secondSlave_handle4 = new SecondSlave();
        SecondSlave secondSlave_handle5 = new SecondSlave();
        SecondSlave secondSlave_handle6 = new SecondSlave();
        SecondSlave secondSlave_handle7 = new SecondSlave();

        if (test == 0) {
            thread_handle0.setFirstSlave(mutexCij_1_0, matrixOrder, a, b, c, 0, 0, 0, 0, 0, 0);
            thread_handle0.setSemaphoreInFirstSlave(semaphoreSecondSlave0);
                    
            c[0][0] = 0;                    
            secondSlave_handle0.setSemaphoreInSecondSlave(semaphoreSecondSlave0);
            secondSlave_handle0.setSecondSlave(mutexCij_1_0, matrixOrder, a, b, c, 0, 0, 0, 0, 0, 0);
            
            secondSlave_handle1.setSemaphoreInSecondSlave(semaphoreSecondSlave0);
            secondSlave_handle1.setSecondSlave(mutexCij_1_0, matrixOrder, a, b, c, 0, 1, 1, 0, 0, 0);
            		
            		
                            
            thread_handle1.setFirstSlave(mutexCij_1_1, matrixOrder, a, b, c, 0, 0, 0, 1, 0, 1);
            thread_handle1.setSemaphoreInFirstSlave(semaphoreSecondSlave1);
                    
            c[0][1] = 0;                    
            secondSlave_handle2.setSemaphoreInSecondSlave(semaphoreSecondSlave1);
            secondSlave_handle2.setSecondSlave(mutexCij_1_1, matrixOrder, a, b, c, 0, 0, 0, 1, 0, 1);
            
            secondSlave_handle3.setSemaphoreInSecondSlave(semaphoreSecondSlave1);
            secondSlave_handle3.setSecondSlave(mutexCij_1_1, matrixOrder, a, b, c, 0, 1, 1, 1, 0, 1);
            		
            		
                            
            thread_handle2.setFirstSlave(mutexCij_1_2, matrixOrder, a, b, c, 1, 0, 0, 0, 1, 0);
            thread_handle2.setSemaphoreInFirstSlave(semaphoreSecondSlave2);
            c[1][0] = 0;
                     
            secondSlave_handle4.setSemaphoreInSecondSlave(semaphoreSecondSlave2);
            secondSlave_handle4.setSecondSlave(mutexCij_1_2, matrixOrder, a, b, c, 1, 0, 0, 0, 1, 0);
            
            secondSlave_handle5.setSemaphoreInSecondSlave(semaphoreSecondSlave2);
            secondSlave_handle5.setSecondSlave(mutexCij_1_2, matrixOrder, a, b, c, 1, 1, 1, 0, 1, 0);
                     
                     
                            
            thread_handle3.setFirstSlave(mutexCij_1_3, matrixOrder, a, b, c, 1, 0, 0, 1, 1, 1);
            thread_handle3.setSemaphoreInFirstSlave(semaphoreSecondSlave3);
            c[1][1] = 0;
                     
            secondSlave_handle6.setSemaphoreInSecondSlave(semaphoreSecondSlave3);
            secondSlave_handle6.setSecondSlave(mutexCij_1_3, matrixOrder, a, b, c, 1, 0, 0, 1, 1, 1);
            
            secondSlave_handle7.setSemaphoreInSecondSlave(semaphoreSecondSlave3);
            secondSlave_handle7.setSecondSlave(mutexCij_1_3, matrixOrder, a, b, c, 1, 1, 1, 1, 1, 1);
            		
        } else {
            thread_handle0.setFirstSlave(mutexCij_2_0, matrixOrder, a, b, c, 0, 0, 0, 0, 0, 0);
            thread_handle0.setSemaphoreInFirstSlave(semaphoreSecondSlave0);
                    
            c[0][0] = 0;                    
            secondSlave_handle0.setSemaphoreInSecondSlave(semaphoreSecondSlave0);
            secondSlave_handle0.setSecondSlave(mutexCij_2_0, matrixOrder, a, b, c, 0, 0, 0, 0, 0, 0);
            
            secondSlave_handle1.setSemaphoreInSecondSlave(semaphoreSecondSlave0);
            secondSlave_handle1.setSecondSlave(mutexCij_2_0, matrixOrder, a, b, c, 0, 1, 1, 0, 0, 0);
            		
            		
                            
            thread_handle1.setFirstSlave(mutexCij_2_1, matrixOrder, a, b, c, 0, 0, 0, 1, 0, 1);
            thread_handle1.setSemaphoreInFirstSlave(semaphoreSecondSlave1);
                    
            c[0][1] = 0;                    
            secondSlave_handle2.setSemaphoreInSecondSlave(semaphoreSecondSlave1);
            secondSlave_handle2.setSecondSlave(mutexCij_2_1, matrixOrder, a, b, c, 0, 0, 0, 1, 0, 1);
            
            secondSlave_handle3.setSemaphoreInSecondSlave(semaphoreSecondSlave1);
            secondSlave_handle3.setSecondSlave(mutexCij_2_1, matrixOrder, a, b, c, 0, 1, 1, 1, 0, 1);
            		
            		
                            
            thread_handle2.setFirstSlave(mutexCij_2_2, matrixOrder, a, b, c, 1, 0, 0, 0, 1, 0);
            thread_handle2.setSemaphoreInFirstSlave(semaphoreSecondSlave2);
            c[1][0] = 0;
                     
            secondSlave_handle4.setSemaphoreInSecondSlave(semaphoreSecondSlave2);
            secondSlave_handle4.setSecondSlave(mutexCij_2_2, matrixOrder, a, b, c, 1, 0, 0, 0, 1, 0);
            
            secondSlave_handle5.setSemaphoreInSecondSlave(semaphoreSecondSlave2);
            secondSlave_handle5.setSecondSlave(mutexCij_2_2, matrixOrder, a, b, c, 1, 1, 1, 0, 1, 0);
                     
                     
                            
            thread_handle3.setFirstSlave(mutexCij_2_3, matrixOrder, a, b, c, 1, 0, 0, 1, 1, 1);
            thread_handle3.setSemaphoreInFirstSlave(semaphoreSecondSlave3);
            c[1][1] = 0;
                     
            secondSlave_handle6.setSemaphoreInSecondSlave(semaphoreSecondSlave3);
            secondSlave_handle6.setSecondSlave(mutexCij_2_3, matrixOrder, a, b, c, 1, 0, 0, 1, 1, 1);
            
            secondSlave_handle7.setSemaphoreInSecondSlave(semaphoreSecondSlave3);
            secondSlave_handle7.setSecondSlave(mutexCij_2_3, matrixOrder, a, b, c, 1, 1, 1, 1, 1, 1);
        }
        
        thread_handle0.start();
        thread_handle1.start();
        thread_handle2.start();
        thread_handle3.start();
        
        secondSlave_handle0.start();
        secondSlave_handle1.start();
        secondSlave_handle2.start();
        secondSlave_handle3.start();
        secondSlave_handle4.start();
        secondSlave_handle5.start();
        secondSlave_handle6.start();
        secondSlave_handle7.start();
        
        secondSlave_handle0.join();
        secondSlave_handle1.join();
        secondSlave_handle2.join();
        secondSlave_handle3.join();
        secondSlave_handle4.join();
        secondSlave_handle5.join();
        secondSlave_handle6.join();
        secondSlave_handle7.join();

        thread_handle0.join();
        thread_handle1.join();
        thread_handle2.join();
        thread_handle3.join();
        
        for (row = 0; row < matrixOrder; row++) {
            for (column = 0; column < matrixOrder; column++) {
                System.out.printf("c[%d][%d]=%d   ", row, column, c[row][column]);
            }
            System.out.println();
        }
    }
}

import java.util.concurrent.Semaphore;

public class SecondSlave extends Thread {
    Semaphore mutexCij;
    Semaphore semaphoreSecondSlave;
    int matrixOrder;
    int a[][];
    int b[][];
    int c[][];
    int row;
    int column;
    int a_row, b_row;
    int a_column, b_column;
    
    public void setSemaphoreInSecondSlave(Semaphore semaphoreSecondSlave) {
        this.semaphoreSecondSlave = semaphoreSecondSlave;	
    }

    public void setSecondSlave(Semaphore mutexCij, int N, int a[][], int b[][], int c[][], int a_row, int a_column, int b_row,
            int b_column, int row, int column) {
        this.mutexCij = mutexCij;
        this.matrixOrder = N;
        this.a = a;
        this.b = b;
        this.c = c;
        this.a_row = a_row;
        this.a_column = a_column;
        this.b_row = b_row;
        this.b_column = b_column;
        this.row = row;
        this.column = column;
    }

    public void run() {
        semaphoreSecondSlave.acquireUninterruptibly();
        int mult;
        mult = a[a_row][a_column] * b[b_row][b_column];
        mutexCij.acquireUninterruptibly();
        c[row][column] += mult;
        mutexCij.release();
    }
}