import java.io.File;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Main {
    public static void main(String[] args) throws Exception {
        int amountOfPassengers = 0;
        int socketId;
        int pid;
        int trips;
        int maxTurns =1;

            amountOfPassengers = Integer.parseInt(args[0]); // NO MAX 10 E MIN 2 
            maxTurns = Integer.parseInt(args[1]);
 if(maxTurns>=1 && maxTurns<=10){

        // create socket 1
        socketId = 1;
        DatagramSocket socket1 = new DatagramSocket();
        int port1 = socket1.getLocalPort();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();

        // make address file with IP:PORT
        String address1 = HelperClass.makeAddress(ip, port1);
        HelperClass.makeAddressMainFile(socketId, address1);

        // create socket 2
        socketId = 2;
        DatagramSocket socket2 = new DatagramSocket();
        int port2 = socket2.getLocalPort();

        // make address file with IP:PORT
        String address2 = HelperClass.makeAddress(ip, port2);
        HelperClass.makeAddressMainFile(socketId, address2);

        // create synch file
        Path fp = Paths.get("wait0");
        Files.createFile(fp);

        // wait synch files
        HelperClass.waitFile(amountOfPassengers + 2);

        byte[] receiveBuffer;

        // join passenger processes
        for (int i = 0; i < amountOfPassengers; i++) {
            receiveBuffer = new byte[255];
            DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            socket1.receive(receivePacket);
            String[] result = new String(receivePacket.getData()).trim().split(",");
            pid = Integer.parseInt(result[0]);
            trips = Integer.parseInt(result[1]);
            System.out.printf("Passenger %d said goodbye with %d turns done. \n", pid, trips);
        }

        // join car process
        receiveBuffer = new byte[255];
        DatagramPacket receivePacket2 = new DatagramPacket(receiveBuffer, receiveBuffer.length);
        socket2.receive(receivePacket2);
        String data = new String(receivePacket2.getData());
        trips = (Integer.parseInt(data.trim()));

        // car process sent all trips done by it in this execution
        System.out.printf("Car says goodbye after %d trips done! \n", trips);

        HelperClass.closeFile(amountOfPassengers + 2);

        for (int i = 1; i < 3; i++) {
            new File("main_socket_" + i + ".txt").delete();
        }
    }}
}

import java.io.File;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Passenger {
    public static void main(String[] args) throws Exception {
        int processId = 0;
        int maxTurns = 0;
        int amountOfPassengers = 0;
        int socketId;
        int turns = 0;
        int buf;
        String data = "";


            processId = Integer.parseInt(args[0]); // FIXO 1, 2, 3 .....
            maxTurns = Integer.parseInt(args[1]); // CLASSE CAR
            amountOfPassengers = Integer.parseInt(args[0]); // CLASSE MAIN 

 if(maxTurns>=1 && maxTurns<=10){

        // create socket 1
        socketId = 1;
        DatagramSocket socket1 = new DatagramSocket();
        int port1 = socket1.getLocalPort();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();

        // make address file with IP:PORT
        String address1 = HelperClass.makeAddress(ip, port1);
        HelperClass.makeAddressPassengerFile(processId, socketId, address1);

        // create socket 2
        socketId = 2;
        DatagramSocket socket2 = new DatagramSocket();
        int port2 = socket2.getLocalPort();

        // make address file with IP:PORT
        String address2 = HelperClass.makeAddress(ip, port2);
        HelperClass.makeAddressPassengerFile(processId, socketId, address2);

        // create synch file
        Path fp = Paths.get("wait" + (processId + 1));
        Files.createFile(fp);

        // wait files
        HelperClass.waitFile(amountOfPassengers + 2);

        byte[] sendBuffer;
        byte[] receiveBuffer;

        String hostIP = "";
        int remotePort;
        InetAddress remoteIP;

        while (turns < maxTurns) {
            // Is there a car ready in the gate?
            hostIP = HelperClass.readCarIP(1);
            remoteIP = InetAddress.getByName(hostIP);
            remotePort = HelperClass.readCarPort(1);

            String dataString = Integer.toString(processId);
            sendBuffer = new byte[255];
            sendBuffer = dataString.getBytes();
            DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
            socket1.send(datagram);

            receiveBuffer = new byte[255];
            DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            socket1.receive(receivePacket);
            data = new String(receivePacket.getData());
            buf = (Integer.parseInt(data.trim()));
            //System.out.println("buf = " + buf);

            // tell car that a passenger has just arrived
            hostIP = HelperClass.readCarIP(2);
            remoteIP = InetAddress.getByName(hostIP);
            remotePort = HelperClass.readCarPort(2);

            dataString = Integer.toString(processId);
            sendBuffer = new byte[255];
            sendBuffer = dataString.getBytes();
            DatagramPacket datagram2 = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
            socket1.send(datagram2);

            // waiting my lap finish
            receiveBuffer = new byte[255];
            DatagramPacket receivePacket2 = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            socket2.receive(receivePacket2);
            data = new String(receivePacket2.getData());
            buf = (Integer.parseInt(data.trim()));
            //System.out.println("buf = " + buf);

            // amount of turns
            turns++;

            /* tell car passenger has just keep out from the car. it sends to
               the car the amount of trips that this passenger has done */
            hostIP = HelperClass.readCarIP(3);
            remoteIP = InetAddress.getByName(hostIP);
            remotePort = HelperClass.readCarPort(3);

            dataString = Integer.toString(turns);
            sendBuffer = new byte[255];
            sendBuffer = dataString.getBytes();
            DatagramPacket datagram3 = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
            socket1.send(datagram3);

            // walking at the park
            Thread.sleep(500); 
        }

        String values = HelperClass.makeMessage(processId, turns);

        hostIP = HelperClass.readMainIP(1);
        remoteIP = InetAddress.getByName(hostIP);
        remotePort = HelperClass.readMainPort(1);

        // tell to main that passenger get out of the park
        sendBuffer = new byte[255];
        sendBuffer = values.toString().getBytes();
        DatagramPacket datagram4 = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
        socket1.send(datagram4);

        for (int i = 1; i < 3; i++) {
            new File("passenger_" + processId + "_socket_" + i + ".txt").delete();
        }
    }}
}

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;

public class HelperClass {
    public static String makeAddress(String ip, int port) {
        StringBuilder builder = new StringBuilder();
        builder.append(ip).append(":").append(port);
        String address = builder.toString();
        return address;
    }

    public static void makeAddressMainFile(int socketId, String address) throws IOException {
        FileWriter ownFile = new FileWriter("main_socket_" + socketId + ".txt");
        PrintWriter writeFile = new PrintWriter(ownFile);
        writeFile.printf(address);
        ownFile.close();
    }
    
    public static String readCarIP(int socketId) throws IOException {
        FileReader file = new FileReader("car_socket_" + socketId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        String hostIP = remoteAddress[0];
        file.close();
        return hostIP;
    }

    public static int readCarPort(int socketId) throws IOException {
        FileReader file = new FileReader("car_socket_" + socketId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        int remotePort = Integer.parseInt(remoteAddress[1]);
        file.close();
        return remotePort;
    }
    
    public static String readMainIP(int socketId) throws IOException {
        FileReader file = new FileReader("main_socket_" + socketId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        String hostIP = remoteAddress[0];
        file.close();
        return hostIP;
    }

    public static int readMainPort(int socketId) throws IOException {
        FileReader file = new FileReader("main_socket_" + socketId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        int remotePort = Integer.parseInt(remoteAddress[1]);
        file.close();
        return remotePort;
    }

    public static void makeAddressPassengerFile(int processId, int socketId, String address) throws IOException {
        FileWriter ownFile = new FileWriter("passenger_"  + processId +       "_socket_"      + socketId + ".txt");
        PrintWriter writeFile = new PrintWriter(ownFile);
        writeFile.printf(address);
        ownFile.close();
    }
    
    public static String makeMessage(int value1, int value2) {
        StringBuilder builder = new StringBuilder();
        builder.append(value1).append(",").append(value2);
        String address = builder.toString();
        return address;
    }
    
    public static void makeAddressCarFile(int socketId, String address) throws IOException {
        FileWriter ownFile = new FileWriter("car_socket_" + socketId + ".txt");
        PrintWriter writeFile = new PrintWriter(ownFile);
        writeFile.printf(address);
        ownFile.close();
    }

    public static String readPassengerIP(int passengerId, int socketId) throws IOException {
        FileReader file = new FileReader("passenger_" + passengerId + "_socket_" + socketId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        String hostIP = remoteAddress[0];
        file.close();
        return hostIP;
    }

    public static int readPassengerPort(int passengerId, int socketId) throws IOException {
        FileReader file = new FileReader("passenger_" + passengerId + "_socket_" + socketId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        int remotePort = Integer.parseInt(remoteAddress[1]);
        file.close();
        return remotePort;
    }
    
    public static void waitFile(int k) {
        for (int i = 1; i < k; i++) {
            while (!Files.exists(Paths.get("wait" + i)));
        }
    }
    
    public static void closeFile(int k) {
        for (int i = 0; i < k; i++) {
            new File("wait" + i).delete();
        }
    }
}

import java.io.File;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Car {
    public static void main(String[] args) throws Exception {
        int carSize = 0;
        int socketId;
        int trips = 0;
        int maxTurns = 0;
        int passengersInTheCar = 0;
        int passengersAtThePark = 0;
        int amountOfPassengers = 0;
        int turns = 0;


            amountOfPassengers = Integer.parseInt(args[0]); // CLASSE MAIN 
            carSize = Integer.parseInt(args[1]); // FIXO 2
            maxTurns = Integer.parseInt(args[2]); // MAIOR QUE 1 

 if(maxTurns>=1 && maxTurns<=10){

        int vetRanks[] = new int[carSize];
        passengersAtThePark = amountOfPassengers;

        // create socket 1
        socketId = 1;
        DatagramSocket socket1 = new DatagramSocket();
        int port1 = socket1.getLocalPort();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();

        // make address file with IP:PORT
        String address1 = HelperClass.makeAddress(ip, port1);
        HelperClass.makeAddressCarFile(socketId, address1);

        // create socket 2
        socketId = 2;
        DatagramSocket socket2 = new DatagramSocket();
        int port2 = socket2.getLocalPort();

        // make address file with IP:PORT
        String address2 = HelperClass.makeAddress(ip, port2);
        HelperClass.makeAddressCarFile(socketId, address2);

        // create socket 3
        socketId = 3;
        DatagramSocket socket3 = new DatagramSocket();
        int port3 = socket3.getLocalPort();

        // make address file with IP:PORT
        String address3 = HelperClass.makeAddress(ip, port3);
        HelperClass.makeAddressCarFile(socketId, address3);

        // create synch file
        Path fp = Paths.get("wait1");
        Files.createFile(fp);

        // wait synch files
        HelperClass.waitFile(amountOfPassengers + 2);

        byte[] sendBuffer;
        byte[] receiveBuffer;

        while (true) {
            // tell "carSize" passengers that car has just arrived to the gate
            for (int i = 0; i < carSize; i++) {
                receiveBuffer = new byte[255];
                DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
                socket1.receive(receivePacket);
                String data = new String(receivePacket.getData());
                vetRanks[i] = (Integer.parseInt(data.trim()));

                String hostIP = HelperClass.readPassengerIP(vetRanks[i], 1);
                InetAddress remoteIP = InetAddress.getByName(hostIP);
                int remotePort = HelperClass.readPassengerPort(vetRanks[i], 1);

                String dataString = Integer.toString(vetRanks[i]);
                sendBuffer = new byte[255];
                sendBuffer = dataString.getBytes();
                DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
                socket1.send(datagram);
            }
            
            // waiting car fill up
            while (passengersInTheCar < carSize) {
                receiveBuffer = new byte[255];
                DatagramPacket receivePacket2 = new DatagramPacket(receiveBuffer, receiveBuffer.length);
                
                // waiting for a passenger
                socket2.receive(receivePacket2);
                String data = new String(receivePacket2.getData());
                vetRanks[passengersInTheCar] = (Integer.parseInt(data.trim()));
                
                // counting how many passengers there are now in the car
                passengersInTheCar++;
            }

            trips++; // counting how many trips have been done

            System.out.printf("The adventure number %d begins with %d passenger(s)! "
                    + "There is(are) %d passenger(s) at the park.\n", trips, passengersInTheCar, passengersAtThePark);

            Thread.sleep(500); // having a funny and crazy trip
            
            // waiting car be empty out
            while (passengersInTheCar > 0) {
                // tell passengers that lap is over
                String hostIP = HelperClass.readPassengerIP(vetRanks[(passengersInTheCar - 1)], 2);
                InetAddress remoteIP = InetAddress.getByName(hostIP);
                int remotePort = HelperClass.readPassengerPort(vetRanks[(passengersInTheCar - 1)], 2);

                String dataString = Integer.toString(vetRanks[(passengersInTheCar - 1)]);
                sendBuffer = new byte[255];
                sendBuffer = dataString.getBytes();
                DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
                socket1.send(datagram);

                receiveBuffer = new byte[255];
                DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
                
                /* wait passenger to keep out from car. 
                   It also receives the amount of trips that this passenger has done. */
                socket3.receive(receivePacket);
                String data = new String(receivePacket.getData());
                turns = (Integer.parseInt(data.trim()));

                /* if amount of trips done by this passenger > maxTurns then
                   passenger is departing from park. */
                if (turns >= maxTurns) {
                    passengersAtThePark--;
                }
                // there is now minus one passenger in the car
                passengersInTheCar--;

            }

            // if park is empty, I must go out!
            if (passengersAtThePark == 0) {
                break; // Yes! I´m going out!
            } else if (passengersAtThePark < carSize) {
                carSize = passengersAtThePark; // there are few passengers at the park
            }
            System.out.printf("There are %d passengers at the park! \n", passengersAtThePark);

        }

        String hostIP = HelperClass.readMainIP(2);
        InetAddress remoteIP = InetAddress.getByName(hostIP);
        int remotePort = HelperClass.readMainPort(2);

        /* tell to main that car is out! 
           It also send amount of trips done by the car in this execution. */
        String dataString = Integer.toString(trips);
        sendBuffer = new byte[255];
        sendBuffer = dataString.getBytes();
        DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
        socket1.send(datagram);

        for (int i = 1; i < 4; i++) {
            new File("car_socket_" + i + ".txt").delete();
        }
    }}
}
