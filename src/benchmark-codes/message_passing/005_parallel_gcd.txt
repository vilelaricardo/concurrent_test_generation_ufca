import java.net.*;
import java.io.*;

public class GcdMaster {
    public static void main(String[] args) throws IOException {
    	final int ZERO = 0;
        final int processId = 0;
        int firstValue = 0;  // X
        int secondValue = 0; // Y
        int thirdValue = 0;  // Z
        int receivedValueOfProcess1 = 0; // GCD result received of the slave process
        int receivedValueOfProcess2 = 0; // GCD result received of the slave process
        int receivedValueOfProcess3 = 0; // GCD result received of the slave process
        String data;

        

            firstValue = Integer.parseInt(args[0]);  // positivo diferente de zero
            secondValue = Integer.parseInt(args[1]); // positivo diferente de zero
            thirdValue = Integer.parseInt(args[2]);  // positivo diferente de zero


if(firstValue>0 && secondValue>0 && thirdValue>0 ){
     
        // create socket
        DatagramSocket socket = new DatagramSocket();
        int port = socket.getLocalPort();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();

        // make address file with IP:PORT
        String address = HelperClass.makeAddress(ip, port);
        HelperClass.makeAddressFile(processId, address);

        // wait slaves
        HelperClass.waitSlaves();

	    // get remote IP and PORT of the slave 1
        String hostIP = HelperClass.readRemoteIP(1);
        InetAddress remoteIPSlave1 = InetAddress.getByName(hostIP);
        int remotePortSlave1 = HelperClass.readRemotePort(1);

        // get remote IP and PORT of the slave 2
        hostIP = HelperClass.readRemoteIP(2);
        InetAddress remoteIPSlave2 = InetAddress.getByName(hostIP);
        int remotePortSlave2 = HelperClass.readRemotePort(2);

        // get remote IP and PORT of the slave 3
        hostIP = HelperClass.readRemoteIP(3);
        InetAddress remoteIPSlave3 = InetAddress.getByName(hostIP);
        int remotePortSlave3 = HelperClass.readRemotePort(3);

        // send x and y to the slave 1
        String values = HelperClass.makeMessage(firstValue, secondValue);
        sendValueToSlave(socket, values, remoteIPSlave1, remotePortSlave1);

        // send y and z to the slave 2
        values = HelperClass.makeMessage(secondValue, thirdValue);
        sendValueToSlave(socket, values, remoteIPSlave2, remotePortSlave2);

        byte[] receiveBuffer;
        
        // receiving the results of the GCD returned by the slaves 1 and 2
        for (int i = 1; i <= 2; i++) {
            receiveBuffer = new byte[255];
            DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            socket.receive(receivePacket);
            data = new String(receivePacket.getData());
            if (i == 1) {
                receivedValueOfProcess1 = (Integer.parseInt(data.trim()));
            } else {
                receivedValueOfProcess2 = (Integer.parseInt(data.trim()));
            }
        }

        /* verification of the returned results. If slave 1 or slave 2 
           returned the result one, then finalize the slave process 3
           sending two data with value ZERO to him */
        if (receivedValueOfProcess1 == 1 || receivedValueOfProcess2 == 1) {
            values = HelperClass.makeMessage(ZERO, ZERO);
            sendValueToSlave(socket, values, remoteIPSlave3, remotePortSlave3);
            System.out.println("Result = 1");
            
        } else { // otherwise, send to slave 3 the results returned by the slaves 1 and 2 
            values = HelperClass.makeMessage(receivedValueOfProcess1, receivedValueOfProcess2);
            sendValueToSlave(socket, values, remoteIPSlave3, remotePortSlave3);
            
            receiveBuffer = new byte[255];
            DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            // receiving the result of the GCD returned by the slave process 3
            socket.receive(receivePacket);
            data = new String(receivePacket.getData());
            receivedValueOfProcess3 = (Integer.parseInt(data.trim()));
            System.out.println("Result = " + receivedValueOfProcess3);
        }

	    // delete address file
        new File("parallel_gcd0.txt").delete();
    } else
{
    	firstValue = -1;
    	secondValue = 1;
    	thirdValue = 1;
	// create socket
	DatagramSocket socket = new DatagramSocket();
        int port = socket.getLocalPort();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();

        // make address file with IP:PORT
        String address = HelperClass.makeAddress(ip, port);
        HelperClass.makeAddressFile(processId, address);

 	// wait slaves
        HelperClass.waitSlaves();

	 // get remote IP and PORT of the slave 1
        String hostIP = HelperClass.readRemoteIP(1);
        InetAddress remoteIPSlave1 = InetAddress.getByName(hostIP);
        int remotePortSlave1 = HelperClass.readRemotePort(1);

        // get remote IP and PORT of the slave 2
        hostIP = HelperClass.readRemoteIP(2);
        InetAddress remoteIPSlave2 = InetAddress.getByName(hostIP);
        int remotePortSlave2 = HelperClass.readRemotePort(2);

        // get remote IP and PORT of the slave 3
        hostIP = HelperClass.readRemoteIP(3);
        InetAddress remoteIPSlave3 = InetAddress.getByName(hostIP);
        int remotePortSlave3 = HelperClass.readRemotePort(3);

	// send x and y to the slave 1
        String values = HelperClass.makeMessage(firstValue,secondValue);
        sendValueToSlave(socket, values, remoteIPSlave1, remotePortSlave1);

        // send y and z to the slave 2
        values = HelperClass.makeMessage(firstValue, secondValue);
        sendValueToSlave(socket, values, remoteIPSlave2, remotePortSlave2);

   	// send y and z to the slave 3
        values = HelperClass.makeMessage(firstValue, secondValue);
        sendValueToSlave(socket, values, remoteIPSlave3, remotePortSlave3);

	System.out.println("Wrong Enter");

    // delete address file
        new File("parallel_gcd0.txt").delete();
}

}

    // send method
    private static void sendValueToSlave(DatagramSocket socket, String values,
    		InetAddress remoteIP, int remotePort) throws IOException {
        byte[] sendBuffer = new byte[255];
        sendBuffer = values.toString().getBytes();
        DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
        socket.send(datagram);
    }
}

import java.net.*;
import java.io.*;

public class GcdSlave {
    public static void main(String[] args) throws IOException {
        int processId = 1; // 1 or 2 or 3
        Integer firstValueSlave; // X if slave process 1 or Y if slave process 2
        Integer secondValueSlave; // Y if slave process 1 or Z if slave process 2

            processId = Integer.parseInt(args[0]);

        // create socket
        DatagramSocket socket = new DatagramSocket();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();
        int port = socket.getLocalPort();

        // make address file with IP:PORT
        String address = HelperClass.makeAddress(ip, port);
        HelperClass.makeAddressFile(processId, address);

        // wait master
        HelperClass.waitMaster();

        // get remote IP and PORT of the master process
        String hostIP = HelperClass.readRemoteIP(0);
        InetAddress remoteIPMaster = InetAddress.getByName(hostIP);
        int remotePortMaster = HelperClass.readRemotePort(0);

	    // receives the values of the master process
        byte[] receiveBuffer = new byte[255];
        DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
        socket.receive(receivePacket);
        String[] result = new String(receivePacket.getData()).trim().split(",");
        firstValueSlave = Integer.parseInt(result[0]);
        secondValueSlave = Integer.parseInt(result[1]);
        
        

	if(firstValueSlave != -1 && secondValueSlave != -1){

        // calculates the GCD
        int gcdResult = gcd(firstValueSlave, secondValueSlave);
        String dataString = Integer.toString(gcdResult);
        
        if (firstValueSlave != 0 && firstValueSlave != 0) {
            // sends result to master process
            byte[] sendBuffer = new byte[255];
            sendBuffer = dataString.getBytes();
            DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIPMaster, remotePortMaster);
            socket.send(datagram);
            socket.close();
        }}
		
	// delete address file
	new File("parallel_gcd" + processId + ".txt").delete();
    }

    // method to calculate the GCD
    private static int gcd(int firstValueSlave, int secondValueSlave) {
        if (firstValueSlave == 0 && secondValueSlave == 0) {
            // finish
            return 0;
        } else {
            while (firstValueSlave != secondValueSlave) {
                if (firstValueSlave < secondValueSlave) {
                    secondValueSlave = secondValueSlave - firstValueSlave;
                } else {
                    firstValueSlave = firstValueSlave - secondValueSlave;
                }
            }
        }
        return firstValueSlave;
    }
}

import java.io.*;
import java.nio.file.*;

public class HelperClass {
    public static String makeAddress(String ip, int port) {
        StringBuilder builder = new StringBuilder();
        builder.append(ip).append(":").append(port);
        String address = builder.toString();
        return address;
    }

    public static void makeAddressFile(int processId, String address) throws IOException {
        FileWriter ownFile = new FileWriter("parallel_gcd" + processId + ".txt");
        PrintWriter writeFile = new PrintWriter(ownFile);
        writeFile.printf(address);
        ownFile.close();
    }

    public static String makeMessage(int value1, int value2) {
        StringBuilder builder = new StringBuilder();
        builder.append(value1).append(",").append(value2);
        String address = builder.toString();
        return address;
    }
	
    public static String readRemoteIP(int processId) throws IOException {
        FileReader file = new FileReader("parallel_gcd" + processId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        String hostIP = remoteAddress[0];
        file.close();
        return hostIP;
    }

    public static int readRemotePort(int processId) throws IOException {
        FileReader file = new FileReader("parallel_gcd" + processId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        int remotePort = Integer.parseInt(remoteAddress[1]);
        file.close();
        return remotePort;
    }

    public static void waitMaster() {
        while (!Files.exists(Paths.get("parallel_gcd0.txt")));
    }

    public static void waitSlaves() {
        while (!Files.exists(Paths.get("parallel_gcd1.txt")));
        while (!Files.exists(Paths.get("parallel_gcd2.txt")));
        while (!Files.exists(Paths.get("parallel_gcd3.txt")));
    }
}