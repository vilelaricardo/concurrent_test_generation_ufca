import java.net.*;
import java.io.*;

public class GcdLcmMaster {
 public static void main(String[] args) throws IOException { 

        int lcm;
        int method = 0; // 0 to GCD, 1 to LCM
        final int ZERO = 0;
        final int processId = 0;
        int firstValue = 0;
        int secondValue = 0;
        int thirdValue = 0;
        int receivedValueOfProcess1 = 0;
        int receivedValueOfProcess2 = 0;
        int receivedValueOfProcess3 = 0;
        String data1;
        String data2;
            method = Integer.parseInt(args[0]);  // 0 ou 1 
            firstValue = Integer.parseInt(args[1]); // positivo diferente de zero 
            secondValue = Integer.parseInt(args[2]); // positivo diferente de zero
            thirdValue = Integer.parseInt(args[3]); // positivo diferente de zero

	// create socket
    	DatagramSocket socket = new DatagramSocket();
        int port = socket.getLocalPort();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();

        // make address file with IP:PORT
        String address = HelperClass.makeAddress(ip, port);
        HelperClass.makeAddressFile(processId, address);

        // wait slaves
        HelperClass.waitSlaves();
 
        // get remote IP and PORT of the slave 1
        String hostIP = HelperClass.readRemoteIP(1);
        InetAddress remoteIP1 = InetAddress.getByName(hostIP);
        int remotePort1 = HelperClass.readRemotePort(1);

        // get remote IP and PORT of the slave 2
        hostIP = HelperClass.readRemoteIP(2);
        InetAddress remoteIP2 = InetAddress.getByName(hostIP);
        int remotePort2 = HelperClass.readRemotePort(2);
        
        //if((firstValue>0) && (secondValue>0) && (thirdValue>0)&&(method>-1)&&(method<2)){ 
	        
	if ((firstValue>0) && (secondValue>0) && (thirdValue>0)){

	if((method>-1)&&(method<2)){	
        // send values to the slave 1
        String values = HelperClass.makeMessage(method, firstValue, secondValue);
        sendValueToSlave(socket, values, remoteIP1, remotePort1);

        // send values to the slave 2
        values = HelperClass.makeMessage(method, secondValue, thirdValue);
        sendValueToSlave(socket, values, remoteIP2, remotePort2);

        byte[] receiveBuffer = new byte[255];
        byte[] receiveBuffer2 = new byte[255];
        DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
        DatagramPacket receivePacket2 = new DatagramPacket(receiveBuffer2, receiveBuffer2.length);

        for (int i = 1; i <= 2; i++) {
            if (i == 1) {
                socket.receive(receivePacket);
                data1 = new String(receivePacket.getData());
                receivedValueOfProcess1 = (Integer.parseInt(data1.trim()));
            } else {
                socket.receive(receivePacket2);
                data2 = new String(receivePacket2.getData());
                receivedValueOfProcess2 = (Integer.parseInt(data2.trim()));
            }
        }

        // get remote IP and PORT of the slave 3
        hostIP = HelperClass.readRemoteIP(3);
        InetAddress remoteIP3 = InetAddress.getByName(hostIP);
        int remotePort3 = HelperClass.readRemotePort(3);

        // set values with zero to finish the slave 3
        values = HelperClass.makeMessage(method, ZERO, ZERO);

        if (method == 0) { // GCD
            if (receivedValueOfProcess1 == 1 || receivedValueOfProcess2 == 1) {
                System.out.println("gcd(" + firstValue + ", " + secondValue + ", " + thirdValue + ") = " + 1);
                // send values to the slave 3
                sendValueToSlave(socket, values, remoteIP3, remotePort3);
            } else {
                values = HelperClass.makeMessage(method, receivedValueOfProcess1, receivedValueOfProcess2);
                // send values to the slave 3
                sendValueToSlave(socket, values, remoteIP3, remotePort3);
                socket.receive(receivePacket);
                data1 = new String(receivePacket.getData());
                receivedValueOfProcess3 = (Integer.parseInt(data1.trim()));
                socket.close();
                System.out.println("gcd(" + firstValue + ", " + secondValue + ", " + thirdValue + ") = " + receivedValueOfProcess3);
            }
        } else if (method == 1) { // LCM
            if (receivedValueOfProcess1 == receivedValueOfProcess2 || receivedValueOfProcess2 == 1) {
                lcm = receivedValueOfProcess1;
                System.out.println("lcm(" + firstValue + ", " + secondValue + ", " + thirdValue + ") = " + lcm);
                // send values to the slave 3
                sendValueToSlave(socket, values, remoteIP3, remotePort3);
            } else if (receivedValueOfProcess1 == 1) {
                lcm = receivedValueOfProcess2;
                System.out.println("lcm(" + firstValue + ", " + secondValue + ", " + thirdValue + ") = " + lcm);
                // send values to the slave 3
                sendValueToSlave(socket, values, remoteIP3, remotePort3);
            } else {
                values = HelperClass.makeMessage(method, receivedValueOfProcess1, receivedValueOfProcess2);
                // send values to the slave 3
                sendValueToSlave(socket, values, remoteIP3, remotePort3);
                socket.receive(receivePacket);
                data1 = new String(receivePacket.getData());
                receivedValueOfProcess3 = (Integer.parseInt(data1.trim()));
                socket.close();
                System.out.println("lcm(" + firstValue + ", " + secondValue + ", " + thirdValue + ") = " + receivedValueOfProcess3);
            }
        }

        HelperClass.closeFiles();
    }else{
//if(!((firstValue>=0) && (secondValue>=0) && (thirdValue>=0))){
//	if(!((method>-1)&&(method<2))){
	 firstValue = -1;
	 secondValue= -1;
	 method = -1;
	 
     // get remote IP and PORT of the slave 3
     hostIP = HelperClass.readRemoteIP(3);
     InetAddress remoteIP3 = InetAddress.getByName(hostIP);
     int remotePort3 = HelperClass.readRemotePort(3);
     
     
     String values = HelperClass.makeMessage(method, firstValue, thirdValue);
     sendValueToSlave(socket, values, remoteIP1, remotePort1);
     sendValueToSlave(socket, values, remoteIP2, remotePort2);
     sendValueToSlave(socket, values, remoteIP3, remotePort3);	
 	HelperClass.closeFiles();
	System.out.println("Wrong Enter"); 
 }
}
else{
//if(!((firstValue>=0) && (secondValue>=0) && (thirdValue>=0))){
//	if(!((method>-1)&&(method<2))){
	 firstValue = -1;
	 secondValue= -1;
	 method = -1;
	 
     // get remote IP and PORT of the slave 3
     hostIP = HelperClass.readRemoteIP(3);
     InetAddress remoteIP3 = InetAddress.getByName(hostIP);
     int remotePort3 = HelperClass.readRemotePort(3);
     
     
     String values = HelperClass.makeMessage(method, firstValue, thirdValue);
     sendValueToSlave(socket, values, remoteIP1, remotePort1);
     sendValueToSlave(socket, values, remoteIP2, remotePort2);
     sendValueToSlave(socket, values, remoteIP3, remotePort3);	
 	HelperClass.closeFiles();
	System.out.println("Wrong Enter"); 
 } }

    // send method
    private static void sendValueToSlave(DatagramSocket socket, String values, InetAddress remoteIP, int remotePort) throws IOException {
        byte[] sendBuffer = new byte[255];
        sendBuffer = values.toString().getBytes();
        DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
        socket.send(datagram);
    }
}

import java.net.*;
import java.io.*;


public class GcdLcmSlave {
    public static void main(String[] args) throws IOException {
        int processId = 0;
        int lcm = 0;
        int method = 0;
        int firstValueSlave;
        int secondValueSlave;


            processId = Integer.parseInt(args[0]);

        // create socket
        DatagramSocket socket = new DatagramSocket();
        int port = socket.getLocalPort();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();

        // make address file with IP:PORT
        String address = HelperClass.makeAddress(ip, port);
        HelperClass.makeAddressFile(processId, address);

        // wait master
        HelperClass.waitMaster();

        // get remote IP and PORT of the master process
        String hostIP = HelperClass.readRemoteIP(0);
        InetAddress remoteIP = InetAddress.getByName(hostIP);
        int remotePort = HelperClass.readRemotePort(0);

        byte[] receiveBuffer = new byte[255];
        DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
        socket.receive(receivePacket);

        String[] result = new String(receivePacket.getData()).trim().split(",");
        method = Integer.parseInt(result[0]);
        firstValueSlave = Integer.parseInt(result[1]);
        secondValueSlave = Integer.parseInt(result[2]);

 if(method != -1 && firstValueSlave != -1 && secondValueSlave != -1 ) {      
        if (processId == 3) {
            if ((method == 1 && (firstValueSlave == secondValueSlave || secondValueSlave == 1)) ||
                (method == 1 && firstValueSlave == 1)) {
                System.exit(0);     
           }
        }
        
        int finalResult = 0;
        if (method == 0) { // GCD
            finalResult = gcd(firstValueSlave, secondValueSlave);
            System.out.println("gcd(" + firstValueSlave + ", " + secondValueSlave + ") = " + finalResult);
        } else if (method == 1) { // LCM
            finalResult = lcm(firstValueSlave, secondValueSlave, lcm);
            System.out.println("lcm(" + firstValueSlave + ", " + secondValueSlave + ") = " + finalResult);
        }

        byte[] sendBuffer = new byte[255];
        String dataString = Integer.toString(finalResult);
        sendBuffer = dataString.getBytes();
        DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
        socket.send(datagram);
        socket.close();
 }

 }

    // method to calculate the GCD
    private static int gcd(int firstValueSlave, int secondValueSlave) {
        int tempFirstValueSlave = 0;
        int tempSecondValueSlave = 0;
        if (firstValueSlave == 0 && secondValueSlave == 0) {
            // this process is finalized;
            System.exit(0); 
        } else {
            // otherwise, calculates the GCD
            tempFirstValueSlave = firstValueSlave;
            tempSecondValueSlave = secondValueSlave;
            while (tempFirstValueSlave != tempSecondValueSlave) {
                if (tempFirstValueSlave < tempSecondValueSlave) {
                    tempSecondValueSlave = tempSecondValueSlave - tempFirstValueSlave;
                } else {
                    tempFirstValueSlave = tempFirstValueSlave - tempSecondValueSlave;
                }
            }
        }
        return tempFirstValueSlave;
    }

    // method to calculate the LCM
    private static int lcm(int firstValueSlave, int secondValueSlave, int lcm) throws IOException {
        if (firstValueSlave == secondValueSlave || secondValueSlave == 1) {
            lcm = firstValueSlave;
        } else if (firstValueSlave == 1) {
            lcm = secondValueSlave;
        } else {
            lcm = 0;
        }
        
        int tempFirstValueSlave = 0;
        int tempSecondValueSlave = 0;
        if (lcm == 0) {
            tempFirstValueSlave = firstValueSlave;
            tempSecondValueSlave = secondValueSlave;
            while (tempFirstValueSlave != tempSecondValueSlave) {
                while (tempFirstValueSlave < tempSecondValueSlave) {
                    tempFirstValueSlave += firstValueSlave;
                }
                while (tempSecondValueSlave < tempFirstValueSlave) {
                    tempSecondValueSlave += secondValueSlave;
                }
            }
            lcm = tempFirstValueSlave;
        }
        return lcm;
    }
}

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;

public class HelperClass {
    public static String makeAddress(String ip, int port) {
        StringBuilder builder = new StringBuilder();
        builder.append(ip).append(":").append(port);
        String address = builder.toString();
        return address;
    }

    public static void makeAddressFile(int processId, String address) throws IOException {
        FileWriter ownFile = new FileWriter("parallel_gcd_lcm" + processId + ".txt");
        PrintWriter writeFile = new PrintWriter(ownFile, true);
        writeFile.printf(address);
        ownFile.close();
    }

    public static void waitMaster() {
        while (!Files.exists(Paths.get("parallel_gcd_lcm0.txt")));
    }

    public static void waitSlaves() {
        while (!Files.exists(Paths.get("parallel_gcd_lcm1.txt")));
        while (!Files.exists(Paths.get("parallel_gcd_lcm2.txt")));
        while (!Files.exists(Paths.get("parallel_gcd_lcm3.txt")));
    }

    public static String readRemoteIP(int slaveId) throws IOException {
        FileReader file = new FileReader("parallel_gcd_lcm" + slaveId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        String hostIP = remoteAddress[0];
        file.close();
        return hostIP;
    }

    public static int readRemotePort(int slaveId) throws IOException {
        FileReader file = new FileReader("parallel_gcd_lcm" + slaveId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        int remotePort = Integer.parseInt(remoteAddress[1]);
        file.close();
        return remotePort;
    }

    public static String makeMessage(int method, int value1, int value2) {
        StringBuilder builder = new StringBuilder();
        builder.append(method).append(",").append(value1).append(",").append(value2);
        String address = builder.toString();
        return address;
    }

    public static void closeFiles() {
        new File("parallel_gcd_lcm0.txt").delete();
        for (int i = 1; i <= 3; i++) {
            new File("parallel_gcd_lcm" + i + ".txt").delete();
        }
    }
}