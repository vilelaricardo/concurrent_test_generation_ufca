import java.net.*;
import java.io.*;
import java.nio.file.*;

public class GcdMaster {
    public static void main(String[] args) throws IOException {
        final int ZERO = 0;
        final int processId = 0;
        final int amountOfProcess = 3;
        int iter = 2; // total number of iterations
        int result = -1; // stores the final GCD result
        int sent = 0;
        String values = "";
   
        int firstValue = 0; // X
        int secondValue = 0; // Y
        int thirdValue = 0; // Z
     

 
            firstValue = Integer.parseInt(args[0]);  // positivo diferente de zero
            secondValue = Integer.parseInt(args[1]); // positivo diferente de zero
            thirdValue = Integer.parseInt(args[2]);  // positivo diferente de zero
 
 
       // create socket
        DatagramSocket socket = new DatagramSocket();
        int port = socket.getLocalPort();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();

        // make address file with IP:PORT
        String address = HelperClass.makeAddress(ip, port);
        HelperClass.makeAddressFile(processId, address);

        // wait slaves
        HelperClass.waitSlaves();

        Path fp = Paths.get("master");
        Files.createFile(fp);

        // get remote IP and PORT of the slave 1
        String hostIP = HelperClass.readRemoteIP(1);
        InetAddress remoteIPSlave1 = InetAddress.getByName(hostIP);
        int remotePortSlave1 = HelperClass.readRemotePort(1);

        // get remote IP and PORT of the slave 2
        hostIP = HelperClass.readRemoteIP(2);
        InetAddress remoteIPSlave2 = InetAddress.getByName(hostIP);
        int remotePortSlave2 = HelperClass.readRemotePort(2);

        byte[] receiveBuffer;
 if((firstValue>0) && (secondValue>0) && (thirdValue>0)){ 
        while (result == -1) {
            while (sent < iter) {
                if (sent == 0) {
                    values = HelperClass.makeMessage(firstValue, secondValue);
                    sendValueToSlave(socket, values, remoteIPSlave1, remotePortSlave1);
                } else {
                    values = HelperClass.makeMessage(secondValue, thirdValue);
                    sendValueToSlave(socket, values, remoteIPSlave2, remotePortSlave2);
                }
                sent++;
            }

            while (sent > 0) {
                receiveBuffer = new byte[255];
                DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
                socket.receive(receivePacket);
                String data = new String(receivePacket.getData());

                if (sent == 2) {
                    firstValue = (Integer.parseInt(data.trim()));
                } else {
                    secondValue = (Integer.parseInt(data.trim()));
                }
                sent--;
            }

            if (iter == 2 && (firstValue == 1 || secondValue == 1)) {
                result = 1;
            } else if (iter == 1) {
                result = secondValue;
            }
            iter--;
        }
        // these messages will finish the slaves processes
        values = HelperClass.makeMessage(ZERO, ZERO);
        sendValueToSlave(socket, values, remoteIPSlave1, remotePortSlave1);
        sendValueToSlave(socket, values, remoteIPSlave2, remotePortSlave2);

        HelperClass.closeFiles(amountOfProcess);
        Files.deleteIfExists(fp);
        System.out.println("Result = " + result);
    }
 
 else if ((firstValue<=0) && (secondValue<=0) && (thirdValue<=0))
 {

	 values = HelperClass.makeMessage(ZERO, ZERO);
     sendValueToSlave(socket, values, remoteIPSlave1, remotePortSlave1);
     sendValueToSlave(socket, values, remoteIPSlave2, remotePortSlave2);
     HelperClass.closeFiles(amountOfProcess);
     Files.deleteIfExists(fp);
     System.out.println("Wrong Enter");
     
 }
    	
    
    }// end of Main

    // send method
    private static void sendValueToSlave(DatagramSocket socket, String values, InetAddress remoteIP, int remotePort)
            throws IOException {
        byte[] sendBuffer = new byte[255];
        sendBuffer = values.toString().getBytes();
        DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
        socket.send(datagram);
    }
}

import java.net.*;
import java.io.*;
import java.nio.file.*;

public class GcdSlave {
    public static void main(String[] args) throws IOException {
        int processId = 1; // 1 or 2
        int firstValueSlave; // X if slave process 1 or Y if slave process 2
        int secondValueSlave; // Y if slave process 1 or Z if slave process 2

       
            processId = Integer.parseInt(args[0]);
       

        // create socket
        DatagramSocket socket = new DatagramSocket();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();
        int port = socket.getLocalPort();

        // make address file with IP:PORT
        String address = HelperClass.makeAddress(ip, port);
        HelperClass.makeAddressFile(processId, address);

        Path fp = Paths.get("slave" + processId);
        Files.createFile(fp);

        // wait master
        HelperClass.waitMaster();

        // get remote IP and PORT of the master process
        String hostIP = HelperClass.readRemoteIP(0);
        InetAddress remoteIP = InetAddress.getByName(hostIP);
        int remotePort = HelperClass.readRemotePort(0);

        byte[] receiveBuffer;
        byte[] sendBuffer;

        while (true) {
            receiveBuffer = new byte[255];
            DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
            socket.receive(receivePacket);
            String[] result = new String(receivePacket.getData()).trim().split(",");
            firstValueSlave = Integer.parseInt(result[0]);
            secondValueSlave = Integer.parseInt(result[1]);

            int gcdResult = gcd(firstValueSlave, secondValueSlave);

            if (gcdResult == -1) {
                break;
            }

            String dataString = Integer.toString(gcdResult);
            sendBuffer = new byte[255];
            sendBuffer = dataString.getBytes();
            DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, remoteIP, remotePort);
            socket.send(datagram);
        }
        socket.close();
        Files.deleteIfExists(fp);
    }

    // method to calculate the GCD
    private static int gcd(int firstValueSlave, int secondValueSlave) {
        if (firstValueSlave == 0 && secondValueSlave == 0) {
            return -1;
        } else {
            while (firstValueSlave != secondValueSlave) {
                if (firstValueSlave < secondValueSlave) {
                    secondValueSlave = secondValueSlave - firstValueSlave;
                } else {
                    firstValueSlave = firstValueSlave - secondValueSlave;
                }
            }
        }
        return firstValueSlave;
    }
}

import java.io.*;
import java.nio.file.*;

public class HelperClass {
    public static String makeAddress(String ip, int port) {
        StringBuilder builder = new StringBuilder();
        builder.append(ip).append(":").append(port);
        String address = builder.toString();
        return address;
    }
    
    public static void makeAddressFile(int processId, String address) throws IOException {
        FileWriter ownFile = new FileWriter("parallel_gcd" + processId + ".txt");
        PrintWriter writeFile = new PrintWriter(ownFile);
        writeFile.printf(address);
        ownFile.close();
    }
    
    public static void waitSlaves() {
        while (!Files.exists(Paths.get("slave1")));
        while (!Files.exists(Paths.get("slave2")));
    }
	
    public static void waitMaster() {
        while (!Files.exists(Paths.get("master")));
    }
    
    public static String makeMessage(int value1, int value2) {
        StringBuilder builder = new StringBuilder();
        builder.append(value1).append(",").append(value2);
        String address = builder.toString();
        return address;
    }

    public static String readRemoteIP(int processId) throws IOException {
        FileReader file = new FileReader("parallel_gcd" + processId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        String hostIP = remoteAddress[0];
        file.close();
        return hostIP;
    }

    public static int readRemotePort(int processId) throws IOException {
        FileReader file = new FileReader("parallel_gcd" + processId + ".txt");
        BufferedReader br = new BufferedReader(file);
        String fileContent;
        while ((fileContent = br.readLine()) == null) {}
        String[] remoteAddress = new String(fileContent).split(":");
        int remotePort = Integer.parseInt(remoteAddress[1]);
        file.close();
        return remotePort;
    }
    
    public static void closeFiles(int amountOfProcess) {
        while (Files.exists(Paths.get("slave2")));
        new File("master").delete();
        for (int i = 0; i < amountOfProcess; i++) {
            new File("parallel_gcd" + i + ".txt").delete();
        }
    }
}