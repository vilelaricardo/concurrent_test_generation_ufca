public class Buffer {
    private int variable;

    public void setSharedObject(int shared) {
        variable = shared;
    }

    public int getSharedObject() {
        return variable;
    }

    public void setSharedIntIncrement() {
        variable++;
    }

    public void setSharedIntMultiplie() {
        variable = variable * 2;
    }
}

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.ByteBuffer;

public class HelperClass {
    
    public static String makeAddress(String ip, int port) {
        StringBuilder builder = new StringBuilder();
        builder.append(ip).append(":").append(port);
        String address = builder.toString();
        return address;
    }
    
    public static void makeAddressFile(int processId, String address) throws IOException {
        FileWriter ownFile = new FileWriter("token_ring_" + processId + ".txt");
        PrintWriter writeFile = new PrintWriter(ownFile);
        writeFile.printf(address);
        ownFile.close();
    }
    
    public static int getClockwiseNeighbor(int processId, int amountOfProcess) {
        int clockwiseAddress = (processId + amountOfProcess + 1) % amountOfProcess;
        return clockwiseAddress;
    }
    
    public static int getCounterclockwiseNeighbor(int processId, int amountOfProcess) {
        int counterclockwiseAddress = (processId + amountOfProcess - 1) % amountOfProcess;
        return counterclockwiseAddress;
    }
 
    public static void waitNeighbors(int clockwiseAddress, int counterclockwiseAddress) {
        while (!Files.exists(Paths.get("token_ring_" + clockwiseAddress + ".txt")));
        while (!Files.exists(Paths.get("token_ring_" + counterclockwiseAddress + ".txt")));
    }
    
    public static String readNeighborIP(int address) throws IOException {
        FileReader file = new FileReader("token_ring_" + address + ".txt");   
        BufferedReader br = new BufferedReader(file); 
        String fileContent; 
        while((fileContent = br.readLine()) == null) {}
        String[] result = new String(fileContent).split(":");
        String hostIP  = result[0]; 
        return hostIP;        
    }
    
    public static int readNeighborPort(int address) throws IOException {
        FileReader file = new FileReader("token_ring_" + address + ".txt"); 
        BufferedReader br2 = new BufferedReader(file); 
        String fileContent; 
        while((fileContent = br2.readLine()) == null) {}
        String[] result = new String(fileContent).split(":");
        int remotePort = Integer.parseInt(result[1]);
        return remotePort;
    }
    
    public static void closeFiles(int amountOfProcesses) throws IOException {
        for (int i = 0; i < amountOfProcesses; i++) {
            new File("token_ring_" + i + ".txt").delete();
        } 
    }
    
    public static ByteBuffer getBuffer(byte[] sendMessage) throws IOException {
        ByteBuffer buffer = ByteBuffer.allocate(128);
        buffer.put(sendMessage);
        buffer.flip();
        return buffer;
    }
}

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.Semaphore;
import java.util.concurrent.CyclicBarrier;

public class Producer extends Thread {
    private Buffer object;
    private Semaphore tokenToProducer;
    private int operation;
    private CyclicBarrier barrier1;
    private CyclicBarrier barrier2;

    public void setProducer(int operation, Semaphore tokenToProducer, CyclicBarrier barrier1, CyclicBarrier barrier2) {
        this.operation = operation;
        this.tokenToProducer = tokenToProducer;
        this.barrier1 = barrier1;
        this.barrier2 = barrier2;
    }

    public void setSharedObject(Buffer object) {
        this.object = object;
    }

    public void run() {
        if (operation == 0) {
            try {
                barrier1.await();
            } catch (InterruptedException | BrokenBarrierException e) {
                e.printStackTrace();
            }
            tokenToProducer.acquireUninterruptibly();
            object.setSharedIntIncrement();
            tokenToProducer.release();
            try {
                barrier2.await();
            } catch (InterruptedException | BrokenBarrierException e) {
                e.printStackTrace();
            }
        }
        if (operation == 1) {
            try {
                barrier1.await();
            } catch (InterruptedException | BrokenBarrierException e) {
                e.printStackTrace();
            }
            tokenToProducer.acquireUninterruptibly();
            object.setSharedIntMultiplie();
            tokenToProducer.release();
            try {
                barrier2.await();
            } catch (InterruptedException | BrokenBarrierException e) {
                e.printStackTrace();
            }
        }
    }
}

import java.io.FileReader;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.DatagramChannel;
import java.net.MulticastSocket;

public class TokenRingMaster {
    public static void main(String args[]) throws Exception {
        long time = System.nanoTime();
        int operation = 0; // 0 or 1 => 0 increment the shared variable, 1 multiplies the shared variable
        int direction = 0; // 0 or 1 => 0 clockwise, 1 counterclockwise
        int amountOfProcesses = 0;
        int sharedVariable = 2;


            operation = Integer.parseInt(args[0]); // 0 OU 1 
            direction = Integer.parseInt(args[1]); // 0 OU 1
            amountOfProcesses = Integer.parseInt(args[2]); //  NO MIN 3

	if((operation==0) || (operation==1)){	
  		if((direction==0) || (direction==1)){   

        // create socket non-blocking address
        DatagramChannel channel = DatagramChannel.open();
        channel.socket().bind( new InetSocketAddress( 0 ));
        channel.configureBlocking(false);

        // get PORT
        int localPort = channel.socket().getLocalPort();
        
        // get local IP
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();
        
        // broadcast
        InetAddress group = InetAddress.getByName("228.5.6.7");
        MulticastSocket socket = new MulticastSocket(6789);
        socket.joinGroup(group);
        
        // make address file with IP:PORT
        String address = HelperClass.makeAddress(ip , localPort);
        HelperClass.makeAddressFile(0, address); 
        
        // identification of the clockwise and counterclockwise neighbors
        int clockwiseAddress = HelperClass.getClockwiseNeighbor(0, amountOfProcesses); 
        int counterclockwiseAddress = HelperClass.getCounterclockwiseNeighbor(0, amountOfProcesses);
        
        // wait neighbors
        HelperClass.waitNeighbors(clockwiseAddress, counterclockwiseAddress);
        
        // clockwise address
        int clockwiseSendPort = HelperClass.readNeighborPort(clockwiseAddress);
        String clockwiseIP = HelperClass.readNeighborIP(clockwiseAddress);
        
        // counterclockwise address
        int counterclockwiseSendPort = HelperClass.readNeighborPort(counterclockwiseAddress);
        String counterclockwiseclockwiseIP = HelperClass.readNeighborIP(counterclockwiseAddress);

        ByteBuffer buffer = HelperClass.getBuffer(Integer.toString(sharedVariable).getBytes());

        if (direction == 0) {
            channel.send(buffer, new InetSocketAddress(clockwiseIP, clockwiseSendPort));
        } else{
            channel.send(buffer, new InetSocketAddress(counterclockwiseclockwiseIP , counterclockwiseSendPort));
        }

        int value = 0;
        SocketAddress addr;
        do {
            buffer = ByteBuffer.allocate(128);
            addr = channel.receive(buffer);
            if (addr != null) {
                buffer.flip();
                byte[] message = new byte[buffer.remaining()];
                buffer.get(message, 0, message.length);
                buffer.clear();
                String strMessage = new String(message).trim();
                value = Integer.parseInt(strMessage);
            }
        } while (addr == null);

        sharedVariable = value;

        if (operation == 0) {
            sharedVariable++;
        } else{
            sharedVariable = sharedVariable * 2;
        }

        System.out.println("\nResult = " + sharedVariable);

        DatagramPacket broadcastResult = new DatagramPacket(Integer.toString(sharedVariable).getBytes(), 
                Integer.toString(sharedVariable).length(), group, 6789);

        socket.send(broadcastResult);
        socket.leaveGroup(group);
        socket.close();

        System.out.println("Broadcast final result.");

        double totalTime = ((double) System.nanoTime() - time) / 1_000_000_000;
        System.out.println("Time: " + totalTime);

        HelperClass.closeFiles(amountOfProcesses);
    }}}
}

import java.io.FileReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.concurrent.Semaphore;
import java.nio.file.*;
import java.util.concurrent.CyclicBarrier;
import java.net.MulticastSocket;

public class TokenRingSlave {
    public static void main(String args[]) throws Exception {
        int processId = 0;
        int operation = 0; // 0 or 1 => 0 increment the shared variable, 1 multiplies the shared variable
        int direction = 0; // 0 or 1 => 0 clockwise, 1 counterclockwise
        int amountOfProcesses = 0;
        int serverPort = 0;
        String data;


            processId = Integer.parseInt(args[0]);
            operation = Integer.parseInt(args[1]);
            direction = Integer.parseInt(args[2]);
            amountOfProcesses = Integer.parseInt(args[3]);

if((operation==0) || (operation==1)){	
  		if((direction==0) || (direction==1)){   
        
        // create socket
        DatagramSocket socket = new DatagramSocket(); 
        int port = socket.getLocalPort();
        InetAddress addressIP = InetAddress.getLocalHost();
        String ip = addressIP.getHostAddress();
        
        InetAddress group = InetAddress.getByName("228.5.6.7");
        MulticastSocket socketBroadcast = new MulticastSocket(6789);
        socketBroadcast.joinGroup(group);
        
        InetAddress serverIP = InetAddress.getLocalHost();
        
        // make address file with IP:PORT
        String address = HelperClass.makeAddress(ip, port); 
        HelperClass.makeAddressFile(processId, address); 
   
        // identification of the clockwise and counterclockwise neighbors
        int clockwiseAddress = HelperClass.getClockwiseNeighbor(processId, amountOfProcesses); 
        int counterclockwiseAddress = HelperClass.getCounterclockwiseNeighbor(processId, amountOfProcesses);
        
        // wait neighbors
        HelperClass.waitNeighbors(clockwiseAddress, counterclockwiseAddress);
        
        int clockwiseSendPort = HelperClass.readNeighborPort(clockwiseAddress);
        int counterclockwiseSendPort = HelperClass.readNeighborPort(counterclockwiseAddress);
                
        Semaphore tokenToProducer = new Semaphore(0);
        tokenToProducer.release();

        CyclicBarrier barrier1 = new CyclicBarrier(3);
        CyclicBarrier barrier2 = new CyclicBarrier(3);

        Buffer sharedObject = new Buffer();

        Producer producer1 = new Producer();
        producer1.setProducer(operation, tokenToProducer, barrier1, barrier2);
        producer1.start();

        Producer producer2 = new Producer();
        producer2.setProducer(operation, tokenToProducer, barrier1, barrier2);
        producer2.start();

        producer1.setSharedObject(sharedObject);
        producer2.setSharedObject(sharedObject);

        byte[] receiveBuffer = new byte[255];
        DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
        socket.receive(receivePacket);
        data = new String(receivePacket.getData());
        int sharedVariable = (Integer.parseInt(data.trim()));

        System.out.println("Received of the neighbor = " + sharedVariable);
        sharedObject.setSharedObject(sharedVariable);

        if (operation == 0) {
            sharedObject.setSharedIntIncrement();
        } else{
            sharedObject.setSharedIntMultiplie();
        }

        barrier1.await();
        barrier2.await();

        sharedVariable = sharedObject.getSharedObject();

        if (direction == 0) {
            serverPort = clockwiseSendPort;
        } else{
            serverPort = counterclockwiseSendPort;
        }

        byte[] sendBuffer = new byte[255];
        String dataString = Integer.toString(sharedVariable);
        sendBuffer = dataString.getBytes();
        DatagramPacket datagram = new DatagramPacket(sendBuffer, sendBuffer.length, serverIP, serverPort);

        if (direction == 0) {
            socket.send(datagram);
        } else{
            socket.send(datagram);
        }

        socket.close();
        
        byte[] buf = new byte[128];
        DatagramPacket recv = new DatagramPacket(buf, buf.length);

        socketBroadcast.receive(recv);
        System.out.print("Broadcast received = ");
        System.out.println(new String(recv.getData()));
        socketBroadcast.leaveGroup(group);
        socketBroadcast.close();
        
        socket.close();
    }}}
}
